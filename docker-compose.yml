version: "3.8"

services:
  cache:
    container_name: redis-cache
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - ./data/cache:/data
    networks:
      - rt_channels

  mongodb:
    container_name: "mongo-rtchannels"
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
      - MONGO_INITDB_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_INITDB_PASSWORD=${MONGO_DB_PASSWORD}
    env_file: .env
    volumes:
      - ./data/mongo:/data/db
    networks:
      - rt_channels
  backend:
    build:
      context: ./backend/
      dockerfile: Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    container_name: django_sense_pi
    volumes:
      - ./backend/:/app
    ports:
      - "8000:8000"
    env_file:
      - ./.env.dev
    depends_on:
      - cache
      - mongodb
      - rabbitmq
    networks:
      - rt_channels

  rabbitmq:
    image: "rabbitmq:3.8-management-alpine"
    container_name: "rabbitmq_rtchannels"
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=root
      - RABBITMQ_USERNAME=admin
      - RABBITMQ_PASSWORD=admin
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./queue/docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ./queue/docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - rt_channels

  ###-------------------------------------------------------------------------
  ###---------------CONSUMER CONTAINERS---------------------------------------
  cache_consumer:
    container_name: redis-cache-consumer
    image: redis:alpine
    restart: always
    ports:
      - "6378:6379"
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - ./data/consumer_cache:/data
    networks:
      - rt_channels

  mongodb_consumer:
    container_name: "mongo-rtchannels-consumer"
    image: mongo
    restart: always
    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_DB_NAME}
      - MONGO_INITDB_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_INITDB_PASSWORD=${MONGO_DB_PASSWORD}
    env_file: .env
    volumes:
      - ./data/consumer_mongo:/data/db
    networks:
      - rt_channels

  backend_consumer:
    build:
      context: ./consumer/
      dockerfile: Dockerfile
    container_name: sensepi_consumer
    volumes:
      - ./consumer/:/app
    ports:
      - "8001:8000"
    env_file:
      - ./.env
      - ./.env.dev
    depends_on:
      - cache_consumer
      - mongodb_consumer
      - rabbitmq
    networks:
      - rt_channels

  queue:
    build:
      context: ./consumer
      dockerfile: Dockerfile
    container_name: sensepi_consumer_queue
    command: "python consumerAmqp.py"
    depends_on:
      - cache_consumer
      - mongodb_consumer
      - rabbitmq
      - backend_consumer
    networks:
      - rt_channels

#  frontend:
#    container_name: rt_frontend
#    build:
#      context: ./frontend
#      dockerfile: Dockerfile
#    stdin_open: true
#    volumes:
#      - "/app/node_modules"
#      - "./frontend/:/app"
#    ports:
#      - 4000:4000
#    command: npm start -- --port 4000
#    networks:
#      - rt_channels
#    depends_on:
#      - backend

#  nginx:
#    depends_on:
#      - backend
#      - frontend
#    restart: always
#    build:
#      dockerfile: Dockerfile
#      context: ./nginx
#    ports:
#      - "3050:80"
networks:
  rt_channels:
    driver: bridge
#volumes:
#  cache:
